const cron = require('node-cron');
const mongoose = require('mongoose');
const moment = require('moment-timezone'); // Aseg√∫rate de instalar moment-timezone
const User = require('../models/User'); // Ajusta la ruta seg√∫n tu estructura

// Conectarse a la base de datos si es necesario (evitar errores de conexi√≥n)
if (mongoose.connection.readyState === 0) {
  mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('üì° Conectado a la base de datos'))
    .catch(err => console.error('‚ùå Error al conectar con MongoDB:', err));
}

// Programar la limpieza de cr√©ditos el √∫ltimo d√≠a del mes a las 23:00 hs
cron.schedule('0 23 28-31 * *', async () => {
  try {
    const today = moment().tz('America/Argentina/Buenos_Aires'); // Configura tu zona horaria
    const lastDay = today.clone().endOf('month').date(); // √öltimo d√≠a del mes

    if (today.date() === lastDay) {
      console.log('üßπ Limpiando cr√©ditos de todos los usuarios...');

      await User.updateMany({}, { creditos: 0 });

      console.log('‚úÖ Cr√©ditos eliminados correctamente.');
    }
  } catch (error) {
    console.error('‚ùå Error al limpiar cr√©ditos:', error);
  }
});
